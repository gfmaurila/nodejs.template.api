
1 -> Criar pastas 
    -> ROde create-structure.bat
    -> npm init -y
    -> npm install express reflect-metadata dotenv class-transformer class-validator
    -> npm install -D typescript ts-node @types/node @types/express nodemon
    -> npx tsc --init
    -> npm install
    -> npm install --save-dev vitest @types/node
    -> npm install --save-dev ts-node
    -> npm install --save-dev vite-tsconfig-paths
    -> npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser
        ->  npm run lint
            npm run lint:fix
            npm run format
    -> npm install redis mssql amqplib mongodb
    -> npm install --save-dev @types/redis @types/mssql @types/amqplib @types/mongodb
    -> npm install kafkajs
    -> npm install --save-dev ts-node
    -> npm install --save-dev ts-node
    -> npm install sequelize sequelize-typescript tedious
    -> npm install --save-dev @types/sequelize
    -> npm install oracledb
    -> npm install --save-dev @types/sequelize
    -> npm install mysql2


1.1 - Rodando a API

    ✅ 1. Rodar em modo desenvolvimento (debug)
        -> npm run start:dev

    ✅ 2. Compilar a API (gerar dist/)

        -> npm run build

    ✅ 3. Rodar a API compilada (modo produção)

        -> npm start

    ✅ 4. Rodando teste

        -> npm run test:live
        -> npx vitest run

    ✅ 5. Rodando teste de base 
        -> npx vitest run
        -> npm run test:databases
        -> npx vitest run src/infrastructure/database/__tests__/SqlServerDatabase.test.ts
        -> npx vitest run src/infrastructure/database/__tests__/OracleDatabase.test.ts
        -> npx vitest run src/infrastructure/database/__tests__/OracleDatabase.test.ts
        -> npx vitest run src/infrastructure/database/__tests__/MySqlDatabase.test.ts
    

    

2 -> GIT    

    git add . 

    git commit -m "feat(auth): implementa login com JWT"
    git commit -m "fix(user): corrige validação de e-mail duplicado"
    git commit -m "docs(readme): atualiza instruções de uso da API"
    git commit -m "refactor(core): melhora legibilidade do middleware de erro"
    git commit -m "test(message): adiciona testes unitários para handlers"
    git commit -m "chore: atualiza pacotes npm e dependências"

    git push


